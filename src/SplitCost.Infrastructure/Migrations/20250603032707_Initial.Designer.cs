// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SpitCost.Infrastructure.Context;

#nullable disable

namespace SplitCost.Infrastructure.Migrations
{
    [DbContext(typeof(SplitCostDbContext))]
    [Migration("20250603032707_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SplitCost.Infrastructure.Entities.ExpenseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsSharedAmongMembers")
                        .HasColumnType("bit");

                    b.Property<Guid>("PaidByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RegisteredByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RegisteredByUserId");

                    b.Property<Guid>("ResidenceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ResidenceId");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PaidByUserId");

                    b.HasIndex("RegisteredByUserId");

                    b.HasIndex("ResidenceId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("SplitCost.Infrastructure.Entities.MemberEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ResidenceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ResidenceId");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ResidenceId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Members");
                });

            modelBuilder.Entity("SplitCost.Infrastructure.Entities.ResidenceEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Apartment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedByUserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CreatedByUserId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("Name");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Prefecture")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatedByUserId");

                    b.ToTable("Residences");
                });

            modelBuilder.Entity("SplitCost.Infrastructure.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AvatarUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SplitCost.Infrastructure.Entities.ExpenseEntity", b =>
                {
                    b.HasOne("SplitCost.Infrastructure.Entities.UserEntity", "PaidBy")
                        .WithMany("ResidenceExpensesPaid")
                        .HasForeignKey("PaidByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SplitCost.Infrastructure.Entities.UserEntity", "RegisteredBy")
                        .WithMany("Expenses")
                        .HasForeignKey("RegisteredByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SplitCost.Infrastructure.Entities.ResidenceEntity", "Residence")
                        .WithMany("Expenses")
                        .HasForeignKey("ResidenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaidBy");

                    b.Navigation("RegisteredBy");

                    b.Navigation("Residence");
                });

            modelBuilder.Entity("SplitCost.Infrastructure.Entities.MemberEntity", b =>
                {
                    b.HasOne("SplitCost.Infrastructure.Entities.ResidenceEntity", "Residence")
                        .WithMany("Members")
                        .HasForeignKey("ResidenceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SplitCost.Infrastructure.Entities.UserEntity", "User")
                        .WithOne("Member")
                        .HasForeignKey("SplitCost.Infrastructure.Entities.MemberEntity", "UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Residence");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SplitCost.Infrastructure.Entities.ResidenceEntity", b =>
                {
                    b.HasOne("SplitCost.Infrastructure.Entities.UserEntity", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("SplitCost.Infrastructure.Entities.ResidenceEntity", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("Members");
                });

            modelBuilder.Entity("SplitCost.Infrastructure.Entities.UserEntity", b =>
                {
                    b.Navigation("Expenses");

                    b.Navigation("Member")
                        .IsRequired();

                    b.Navigation("ResidenceExpensesPaid");
                });
#pragma warning restore 612, 618
        }
    }
}
